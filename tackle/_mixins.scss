// ############################################################################
// Various Mixins
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
///
@mixin tb-output-declaration($map) {

  @if 'map' != type_of($map) {
    @error 'tb-output-declaration() expects type `map`. Given `#{type_of($map)}`';
  }

  @each $key, $value in $map {
    @if 'map' == type_of($value) {

      @if str-index($key, 'bp-') {

        @include media('>#{str-slice($key, 4)}') {
          @include tb-output-declaration($value);
        }

      } //
      @else if index((link, visited, hover, active, focus), $key) {
        &:#{$key} {
          @include tb-output-declaration($value);
        }
      } //
      @else if index((headings), $key) {
        h1, h2, h3, h4, h5, h6 {
          @include tb-output-declaration($value);
        }
      } //
      @else if index((font-size-respond), $key) {
        @each $bp-name, $bp-value in $value {
          @include media('>#{$bp-name}') { font-size: $bp-value; }
        }
      } //
      @else {
        #{$key} {
          @include tb-output-declaration($value);
        }
      }
    } //
    @else {
      #{$key}: $value;
    }
  }
}

// ----------------------------------------------------------------------------
///
@mixin tb-builder-colors($map, $namespace) {

  @if 'map' != type_of($map) {
    @error 'tb-builder-colors() expects type `map`. Given `#{type_of($map)}`';
  }

  @each $key, $value in $map {
    @if not map-get($value, disable-foreground) {
      .#{$namespace}-c-#{$key} { color: map-get($value, color) !important; }
    }

    @if not map-get($value, disable-background) {
      .#{$namespace}-bgc-#{$key} { background-color: map-get($value, color) !important; }
    }
  }
}

// ----------------------------------------------------------------------------
///
@mixin tb-builder-sections-output($bp-name, $class, $values) {
  @include media('>=#{$bp-name}') {
    #{$class} {
      @include tb-output-declaration($values);
    }
  }
}

// ----------------------------------------------------------------------------
///
@mixin tb-builder-sections($map, $namespace, $sxn-name: '.sxn', $row-name: '.row', $col-name: '.col' ) {
  @each $name, $bp-values in $map {

    @each $bp-name, $blocks in $bp-values {
      @each $block-name, $block-values in $blocks {
        $sxn: if('default' != $name, '#{$sxn-name}.#{$namespace}-sxn-#{$name}', #{$sxn-name});

        @if 'section'== $block-name {
          @include tb-builder-sections-output($bp-name, $sxn, $block-values);
        } //
        @else if 'row'== $block-name {
          @include tb-builder-sections-output($bp-name, $sxn #{$row-name}, $block-values);
        } //
        @else if 'column'== $block-name {
          @include tb-builder-sections-output($bp-name, $sxn #{$col-name}, $block-values);
        } //
        @else if 'button'== $block-name {
          $class: '#page-container #{$sxn} input[type="submit"]';
          @include tb-builder-sections-output($bp-name, unquote($class), $block-values);
        } //
        @else {
          @include tb-builder-sections-output($bp-name, $sxn #{$block-name}, $block-values);
        }
      }
    }
  }
}

// ----------------------------------------------------------------------------
///
@mixin tb-builder-grids($map, $namespace, $row-name: '.row', $col-name: '.col' ) {
  .#{$namespace}-#{$row-name} {
    @include tb-grid-group($is-nested: true);
  }

  .#{$namespace}-#{$col-name} {
    @include tb-grid-gutters();
  }

  @each $name, $bp-values in $map {
    @each $bp-name, $value in $bp-values {

      @include media('>=#{$bp-name}') {
        .#{$namespace}-#{$col-name}-#{$name} {
          @include tb-grid-cell($value);
        }
      }
    }
  }
}

// ----------------------------------------------------------------------------
///
@mixin tb-overlay-Container() {
  position: relative;
  overflow: hidden;
}

// ----------------------------------------------------------------------------
///
@mixin tb-overlay-Item($vertical: 'full', $horizontal:'full') {
  position: absolute;

  @if 'full' == $vertical and 'full' == $horizontal {
    top: 0;
    width: 100.75%;
    height: 100%;
    transform: translateX(0) translatey(0);
  } //
    //
  @else if 'full' == $vertical and 'center' == $horizontal {
    top: 0;
    left: 50%;
    height: 100%;
    transform: translateX(-50%) translatey(0);
  } //
    //
  @else if 'full' == $vertical and 'right' == $horizontal {
    top: 0;
    right: 0;
    height: 100%;
  } //
    //
  @else if 'full' == $vertical and 'left' == $horizontal {
    top: 0;
    height: 100%;
  } //
    //
  @else if 'top' == $vertical and 'full' == $horizontal {
    top: 0;
    left: 50%;
    width: 100.75%;
    transform: translateX(-50%) translatey(0);
  } //
    //
  @else if 'top' == $vertical and 'center' == $horizontal {
    top: 0;
    left: 50%;
    transform: translateX(-50%) translatey(0);
  } //
    //
  @else if 'top' == $vertical and 'right' == $horizontal {
    top: 0;
    right: 0;
  } //
    //
  @else if 'top' == $vertical and 'left' == $horizontal {
    top: 0;
  } //
    //
  @else if 'center' == $vertical and 'full' == $horizontal {
    top: 50%;
    left: 50%;
    width: 100.75%;
    transform: translateX(-50%) translatey(-50%);
  } //
    //
  @else if 'center' == $vertical and 'center' == $horizontal {
    top: 50%;
    left: 50%;
    transform: translateX(-50%) translatey(-50%);
  } //
    //
  @else if 'center' == $vertical and 'right' == $horizontal {
    top: 50%;
    right: 0;
    transform: translateX(0) translatey(-50%);
  } //
    //
  @else if 'center' == $vertical and 'left' == $horizontal {
    top: 50%;
    transform: translateX(0) translatey(-50%);
  } //

  @else if 'bottom' == $vertical and 'full' == $horizontal {
    bottom: 0;
    left: 50%;
    width: 100.75%;
    transform: translateX(-50%) translatey(0);
  } //
    //
  @else if 'bottom' == $vertical and 'center' == $horizontal {
    bottom: 0;
    left: 50%;
    transform: translateX(-50%) translatey(0);
  } //
    //
  @else if 'bottom' == $vertical and 'right' == $horizontal {
    bottom: 0;
    right: 0;
  } //
    //
  @else if 'bottom' == $vertical and 'left' == $horizontal {
    bottom: 0;
  }
  //

}
