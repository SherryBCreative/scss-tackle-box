// ############################################################################
// Various Functions
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// @todo attribute
@function tb-pow($base, $exponent) {
  $value: 1;

  @if $exponent >= 0 {
    @for $i from 1 through $exponent {
      $value: $value * $base;
    }
  }
    //
  @else {
    @for $i from $exponent to 0 {
      $value: $value / $base;
    }
  }

  @return $value;
}

// ----------------------------------------------------------------------------
//
$tb-decimal-places: 4 !default;

// ----------------------------------------------------------------------------
//
@function tb-round-decimal($number, $places: $tb-decimal-places) {
  @if 0 == $places {
    @return round($number);
  }

  $n: tb-pow(10, $places);
  @return round($number * $n) / $n;
}

// ----------------------------------------------------------------------------
/// Fetch nested keys
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
/// @return {*}
/// @author Hugo Giraudel
/// @link https://www.sitepoint.com/extra-map-functions-sass/
@function tb-map-get-deep($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

// ----------------------------------------------------------------------------
/// Update a key deeply nested
/// @author Hugo Giraudel
/// @param {Map} $map - Map to update
/// @param {Arglist} $keys - Keys to access to value to update
/// @param {*} $value - New value (last member of `$keys`)
/// @return {Map} - Updated map
@function tb-map-set-deep($map, $keys.../*, $value */
) {
  $map-list: ($map,);
  $result: null;

  @if length($keys) == 2 {
    @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
  }

  @for $i from 1 through length($keys) - 2 {
    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
  }

  @for $i from length($map-list) through 1 {
    $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
  }

  @return $result;
}

/// Deep set function to set a value in nested maps
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
@function tb-map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}

// ----------------------------------------------------------------------------
/// Used to recursively merge (deep merge) two maps
///
/// @author Pedr Browne
/// @access public
/// @link https://git.io/vPrlX
///
/// @param {map} $map-old - The original map
/// @param {map} $map-new - The new map you wish to merge into the original
/// @param {bool} $overwrite [true] - Overwrite existing keys
///
/// @return {map} - merged map
@function tb-map-merge-deep($map-old, $map-new, $overwrite: true) {

  // Iterate through each value of the new map
  @each $key, $new-value in $map-new {

    // Check if that value already exists on the old map
    @if map-has-key($map-old, $key) {
      // There is an existing key
      $old-value: map-get($map-old, $key);
      @if type-of($new-value) == map and type-of($old-value) == map {
        // If both are maps, recurse regardless of $overwrite
        $merged-value: tb-map-merge-deep($old-value, $new-value);
        $map-old: map-set($map-old, $key, $merged-value);
      } @else {
        // Otherwise check $overwrite
        @if $overwrite {
          $map-old: map-set($map-old, $key, $new-value);
        }
      }
    } @else {
      // There is no existing key to add
      $map-old: map-set($map-old, $key, $new-value);
    }

  }

  @return $map-old;
}

// ----------------------------------------------------------------------------
/// Convert px to em
///
/// @param {measure|number} $px
/// @param {measure|number} $base
///
/// @return {measure}
@function tb-px-to-em($px, $base:16px) {
  @return $px/$base * 1em;
}

// ----------------------------------------------------------------------------
/// Convert px to rem
///
/// @param {measure|number} $px
/// @param {measure|number} $base
///
/// @return {measure}
@function tb-px-to-rem($px, $context: $fz-base) {
  @return $px/$base * 1rem;
}

// ----------------------------------------------------------------------------
/// Strip Unit
///
// @author Hugo Giraudel
///
@function tb-strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// ----------------------------------------------------------------------------
///
// https://www.sassmeister.com/gist/7f22e44ace49b5124eec
//
// @author Indrek Paas @indrekpaa
///
@mixin tb-fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value, $important: false) {
  $important: if($important, unquote('!important'), null);

  @each $property in $properties {
    #{$property}: $min-value $important;
  }

  @media screen and (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{tb-strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{tb-strip-unit($max-vw - $min-vw)}) $important;
    }
  }

  @media screen and (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value $important;
    }
  }
}